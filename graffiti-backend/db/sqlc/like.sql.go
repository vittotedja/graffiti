// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: like.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createLike = `-- name: CreateLike :one
INSERT INTO likes(
 post_id,
 user_id
) VALUES (
  $1, $2
) RETURNING id, post_id, user_id, liked_at
`

type CreateLikeParams struct {
	PostID pgtype.UUID
	UserID pgtype.UUID
}

func (q *Queries) CreateLike(ctx context.Context, arg CreateLikeParams) (Like, error) {
	row := q.db.QueryRow(ctx, createLike, arg.PostID, arg.UserID)
	var i Like
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.UserID,
		&i.LikedAt,
	)
	return i, err
}

const getLike = `-- name: GetLike :one
SELECT id, post_id, user_id, liked_at FROM likes
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetLike(ctx context.Context, id pgtype.UUID) (Like, error) {
	row := q.db.QueryRow(ctx, getLike, id)
	var i Like
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.UserID,
		&i.LikedAt,
	)
	return i, err
}

const listLikes = `-- name: ListLikes :many
SELECT id, post_id, user_id, liked_at FROM likes
ORDER BY liked_at DESC
`

func (q *Queries) ListLikes(ctx context.Context) ([]Like, error) {
	rows, err := q.db.Query(ctx, listLikes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Like
	for rows.Next() {
		var i Like
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.UserID,
			&i.LikedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLikesByPost = `-- name: ListLikesByPost :many
SELECT id, post_id, user_id, liked_at FROM likes
WHERE post_id = $1
ORDER BY liked_at DESC
`

func (q *Queries) ListLikesByPost(ctx context.Context, postID pgtype.UUID) ([]Like, error) {
	rows, err := q.db.Query(ctx, listLikesByPost, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Like
	for rows.Next() {
		var i Like
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.UserID,
			&i.LikedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLikesByUser = `-- name: ListLikesByUser :many
SELECT id, post_id, user_id, liked_at FROM likes
WHERE user_id = $1
ORDER BY liked_at DESC
`

func (q *Queries) ListLikesByUser(ctx context.Context, userID pgtype.UUID) ([]Like, error) {
	rows, err := q.db.Query(ctx, listLikesByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Like
	for rows.Next() {
		var i Like
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.UserID,
			&i.LikedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNumberOfLikesByPost = `-- name: getNumberOfLikesByPost :one
SELECT COUNT(*) FROM likes
WHERE post_id = $1
`

func (q *Queries) getNumberOfLikesByPost(ctx context.Context, postID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, getNumberOfLikesByPost, postID)
	var count int64
	err := row.Scan(&count)
	return count, err
}
