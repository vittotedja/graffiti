// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type PostType string

const (
	PostTypeMedia     PostType = "media"
	PostTypeEmbedLink PostType = "embed_link"
)

func (e *PostType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PostType(s)
	case string:
		*e = PostType(s)
	default:
		return fmt.Errorf("unsupported scan type for PostType: %T", src)
	}
	return nil
}

type NullPostType struct {
	PostType PostType
	Valid    bool // Valid is true if PostType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPostType) Scan(value interface{}) error {
	if value == nil {
		ns.PostType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PostType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPostType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PostType), nil
}

type Status string

const (
	StatusPending Status = "pending"
	StatusFriends Status = "friends"
	StatusBlocked Status = "blocked"
)

func (e *Status) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Status(s)
	case string:
		*e = Status(s)
	default:
		return fmt.Errorf("unsupported scan type for Status: %T", src)
	}
	return nil
}

type NullStatus struct {
	Status Status
	Valid  bool // Valid is true if Status is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullStatus) Scan(value interface{}) error {
	if value == nil {
		ns.Status, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Status.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Status), nil
}

type Friendship struct {
	ID        pgtype.UUID
	UserID    pgtype.UUID
	FriendID  pgtype.UUID
	Status    NullStatus
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

type Like struct {
	ID      pgtype.UUID
	PostID  pgtype.UUID
	UserID  pgtype.UUID
	LikedAt pgtype.Timestamp
}

type Post struct {
	ID            pgtype.UUID
	WallID        pgtype.UUID
	Author        pgtype.UUID
	MediaUrl      pgtype.Text
	PostType      NullPostType
	IsHighlighted pgtype.Bool
	LikesCount    pgtype.Int4
	IsDeleted     pgtype.Bool
	CreatedAt     pgtype.Timestamp
}

type User struct {
	ID              pgtype.UUID
	Username        string
	Fullname        pgtype.Text
	Email           string
	HashedPassword  string
	ProfilePicture  pgtype.Text
	Bio             pgtype.Text
	HasOnboarded    pgtype.Bool
	BackgroundImage pgtype.Text
	OnboardingAt    pgtype.Timestamp
	CreatedAt       pgtype.Timestamp
	UpdatedAt       pgtype.Timestamp
}

type Wall struct {
	ID              pgtype.UUID
	UserID          pgtype.UUID
	Description     pgtype.Text
	BackgroundImage pgtype.Text
	IsPublic        pgtype.Bool
	IsArchived      pgtype.Bool
	IsDeleted       pgtype.Bool
	PopularityScore pgtype.Float8
	CreatedAt       pgtype.Timestamp
	UpdatedAt       pgtype.Timestamp
}
