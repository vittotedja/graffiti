// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: notification.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countUnreadNotifications = `-- name: CountUnreadNotifications :one
SELECT COUNT(*) FROM notifications
WHERE recipient_id = $1 AND is_read = false
`

func (q *Queries) CountUnreadNotifications(ctx context.Context, recipientID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countUnreadNotifications, recipientID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createNotification = `-- name: CreateNotification :one
INSERT INTO notifications (
  recipient_id,
  sender_id,
  type,
  entity_id,
  message,
  is_read,
  created_at
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
) RETURNING id, recipient_id, sender_id, type, entity_id, message, is_read, created_at
`

type CreateNotificationParams struct {
	RecipientID pgtype.UUID
	SenderID    pgtype.UUID
	Type        string
	EntityID    pgtype.UUID
	Message     string
	IsRead      pgtype.Bool
	CreatedAt   pgtype.Timestamp
}

func (q *Queries) CreateNotification(ctx context.Context, arg CreateNotificationParams) (Notification, error) {
	row := q.db.QueryRow(ctx, createNotification,
		arg.RecipientID,
		arg.SenderID,
		arg.Type,
		arg.EntityID,
		arg.Message,
		arg.IsRead,
		arg.CreatedAt,
	)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.RecipientID,
		&i.SenderID,
		&i.Type,
		&i.EntityID,
		&i.Message,
		&i.IsRead,
		&i.CreatedAt,
	)
	return i, err
}

const deleteNotification = `-- name: DeleteNotification :exec
DELETE FROM notifications
WHERE id = $1
`

func (q *Queries) DeleteNotification(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteNotification, id)
	return err
}

const getNotificationsByUser = `-- name: GetNotificationsByUser :many
SELECT id, recipient_id, sender_id, type, entity_id, message, is_read, created_at FROM notifications
WHERE recipient_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetNotificationsByUser(ctx context.Context, recipientID pgtype.UUID) ([]Notification, error) {
	rows, err := q.db.Query(ctx, getNotificationsByUser, recipientID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.RecipientID,
			&i.SenderID,
			&i.Type,
			&i.EntityID,
			&i.Message,
			&i.IsRead,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markAllNotificationsAsRead = `-- name: MarkAllNotificationsAsRead :exec
UPDATE notifications
SET is_read = true
WHERE recipient_id = $1
`

func (q *Queries) MarkAllNotificationsAsRead(ctx context.Context, recipientID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, markAllNotificationsAsRead, recipientID)
	return err
}

const markNotificationAsRead = `-- name: MarkNotificationAsRead :exec
UPDATE notifications
SET is_read = true
WHERE id = $1
`

func (q *Queries) MarkNotificationAsRead(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, markNotificationAsRead, id)
	return err
}
