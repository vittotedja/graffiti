// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: wall.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const archiveWall = `-- name: ArchiveWall :exec
UPDATE walls
    set is_archived = true
WHERE id = $1
RETURNING id, user_id, title, description, background_image, is_public, is_archived, is_deleted, popularity_score, created_at, updated_at, is_pinned
`

func (q *Queries) ArchiveWall(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, archiveWall, id)
	return err
}

const createTestWall = `-- name: CreateTestWall :one
INSERT INTO walls(
    user_id,
    title,
    description,
    is_public,
    background_image
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, user_id, title, description, background_image, is_public, is_archived, is_deleted, popularity_score, created_at, updated_at, is_pinned
`

type CreateTestWallParams struct {
	UserID          pgtype.UUID
	Title           string
	Description     pgtype.Text
	IsPublic        pgtype.Bool
	BackgroundImage pgtype.Text
}

func (q *Queries) CreateTestWall(ctx context.Context, arg CreateTestWallParams) (Wall, error) {
	row := q.db.QueryRow(ctx, createTestWall,
		arg.UserID,
		arg.Title,
		arg.Description,
		arg.IsPublic,
		arg.BackgroundImage,
	)
	var i Wall
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.BackgroundImage,
		&i.IsPublic,
		&i.IsArchived,
		&i.IsDeleted,
		&i.PopularityScore,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsPinned,
	)
	return i, err
}

const createWall = `-- name: CreateWall :one
INSERT INTO walls(
    user_id,
    description,
    background_image
) VALUES (
    $1, $2, $3
) RETURNING id, user_id, title, description, background_image, is_public, is_archived, is_deleted, popularity_score, created_at, updated_at, is_pinned
`

type CreateWallParams struct {
	UserID          pgtype.UUID
	Description     pgtype.Text
	BackgroundImage pgtype.Text
}

func (q *Queries) CreateWall(ctx context.Context, arg CreateWallParams) (Wall, error) {
	row := q.db.QueryRow(ctx, createWall, arg.UserID, arg.Description, arg.BackgroundImage)
	var i Wall
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.BackgroundImage,
		&i.IsPublic,
		&i.IsArchived,
		&i.IsDeleted,
		&i.PopularityScore,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsPinned,
	)
	return i, err
}

const deleteWall = `-- name: DeleteWall :exec
UPDATE walls
    set is_deleted = true
WHERE id = $1
`

func (q *Queries) DeleteWall(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteWall, id)
	return err
}

const getWall = `-- name: GetWall :one
SELECT id, user_id, title, description, background_image, is_public, is_archived, is_deleted, popularity_score, created_at, updated_at, is_pinned FROM walls
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetWall(ctx context.Context, id pgtype.UUID) (Wall, error) {
	row := q.db.QueryRow(ctx, getWall, id)
	var i Wall
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.BackgroundImage,
		&i.IsPublic,
		&i.IsArchived,
		&i.IsDeleted,
		&i.PopularityScore,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsPinned,
	)
	return i, err
}

const listWalls = `-- name: ListWalls :many
SELECT id, user_id, title, description, background_image, is_public, is_archived, is_deleted, popularity_score, created_at, updated_at, is_pinned FROM walls
ORDER BY id DESC
`

func (q *Queries) ListWalls(ctx context.Context) ([]Wall, error) {
	rows, err := q.db.Query(ctx, listWalls)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Wall
	for rows.Next() {
		var i Wall
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Description,
			&i.BackgroundImage,
			&i.IsPublic,
			&i.IsArchived,
			&i.IsDeleted,
			&i.PopularityScore,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsPinned,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWallsByUser = `-- name: ListWallsByUser :many
SELECT id, user_id, title, description, background_image, is_public, is_archived, is_deleted, popularity_score, created_at, updated_at, is_pinned FROM walls
WHERE user_id = $1
AND is_deleted = false
AND is_archived = false
ORDER BY created_at DESC
`

func (q *Queries) ListWallsByUser(ctx context.Context, userID pgtype.UUID) ([]Wall, error) {
	rows, err := q.db.Query(ctx, listWallsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Wall
	for rows.Next() {
		var i Wall
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Description,
			&i.BackgroundImage,
			&i.IsPublic,
			&i.IsArchived,
			&i.IsDeleted,
			&i.PopularityScore,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsPinned,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const pinUnpinWall = `-- name: PinUnpinWall :one
UPDATE walls
    set is_pinned = not is_pinned
WHERE id = $1
RETURNING id, user_id, title, description, background_image, is_public, is_archived, is_deleted, popularity_score, created_at, updated_at, is_pinned
`

func (q *Queries) PinUnpinWall(ctx context.Context, id pgtype.UUID) (Wall, error) {
	row := q.db.QueryRow(ctx, pinUnpinWall, id)
	var i Wall
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.BackgroundImage,
		&i.IsPublic,
		&i.IsArchived,
		&i.IsDeleted,
		&i.PopularityScore,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsPinned,
	)
	return i, err
}

const privatizeWall = `-- name: PrivatizeWall :one
UPDATE walls
    set is_public = false
WHERE id = $1
RETURNING id, user_id, title, description, background_image, is_public, is_archived, is_deleted, popularity_score, created_at, updated_at, is_pinned
`

func (q *Queries) PrivatizeWall(ctx context.Context, id pgtype.UUID) (Wall, error) {
	row := q.db.QueryRow(ctx, privatizeWall, id)
	var i Wall
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.BackgroundImage,
		&i.IsPublic,
		&i.IsArchived,
		&i.IsDeleted,
		&i.PopularityScore,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsPinned,
	)
	return i, err
}

const publicizeWall = `-- name: PublicizeWall :one
UPDATE walls
    set is_public = true
WHERE id = $1
RETURNING id, user_id, title, description, background_image, is_public, is_archived, is_deleted, popularity_score, created_at, updated_at, is_pinned
`

func (q *Queries) PublicizeWall(ctx context.Context, id pgtype.UUID) (Wall, error) {
	row := q.db.QueryRow(ctx, publicizeWall, id)
	var i Wall
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.BackgroundImage,
		&i.IsPublic,
		&i.IsArchived,
		&i.IsDeleted,
		&i.PopularityScore,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsPinned,
	)
	return i, err
}

const unarchiveWall = `-- name: UnarchiveWall :exec
UPDATE walls
    set is_archived = false
WHERE id = $1
RETURNING id, user_id, title, description, background_image, is_public, is_archived, is_deleted, popularity_score, created_at, updated_at, is_pinned
`

func (q *Queries) UnarchiveWall(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, unarchiveWall, id)
	return err
}

const updateWall = `-- name: UpdateWall :one
UPDATE walls
SET 
    title = COALESCE($2, title),
    description = COALESCE($3, description),
    background_image = COALESCE($4, background_image),
    is_public = COALESCE($5, is_public)
WHERE id = $1
RETURNING id, user_id, title, description, background_image, is_public, is_archived, is_deleted, popularity_score, created_at, updated_at, is_pinned
`

type UpdateWallParams struct {
	ID              pgtype.UUID
	Title           string
	Description     pgtype.Text
	BackgroundImage pgtype.Text
	IsPublic        pgtype.Bool
}

func (q *Queries) UpdateWall(ctx context.Context, arg UpdateWallParams) (Wall, error) {
	row := q.db.QueryRow(ctx, updateWall,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.BackgroundImage,
		arg.IsPublic,
	)
	var i Wall
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.BackgroundImage,
		&i.IsPublic,
		&i.IsArchived,
		&i.IsDeleted,
		&i.PopularityScore,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsPinned,
	)
	return i, err
}
