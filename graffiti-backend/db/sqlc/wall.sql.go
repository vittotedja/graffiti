// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: wall.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createWall = `-- name: CreateWall :one
INSERT INTO walls(
 user_id,
 description,
 background_image
) VALUES (
  $1, $2, $3
) RETURNING id, user_id, description, background_image, is_public, is_archived, is_deleted, popularity_score, created_at, updated_at
`

type CreateWallParams struct {
	UserID          pgtype.UUID
	Description     pgtype.Text
	BackgroundImage pgtype.Text
}

func (q *Queries) CreateWall(ctx context.Context, arg CreateWallParams) (Wall, error) {
	row := q.db.QueryRow(ctx, createWall, arg.UserID, arg.Description, arg.BackgroundImage)
	var i Wall
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Description,
		&i.BackgroundImage,
		&i.IsPublic,
		&i.IsArchived,
		&i.IsDeleted,
		&i.PopularityScore,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWall = `-- name: GetWall :one
SELECT id, user_id, description, background_image, is_public, is_archived, is_deleted, popularity_score, created_at, updated_at FROM walls
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetWall(ctx context.Context, id pgtype.UUID) (Wall, error) {
	row := q.db.QueryRow(ctx, getWall, id)
	var i Wall
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Description,
		&i.BackgroundImage,
		&i.IsPublic,
		&i.IsArchived,
		&i.IsDeleted,
		&i.PopularityScore,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listWalls = `-- name: ListWalls :many
SELECT id, user_id, description, background_image, is_public, is_archived, is_deleted, popularity_score, created_at, updated_at FROM walls
ORDER BY id
`

func (q *Queries) ListWalls(ctx context.Context) ([]Wall, error) {
	rows, err := q.db.Query(ctx, listWalls)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Wall
	for rows.Next() {
		var i Wall
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Description,
			&i.BackgroundImage,
			&i.IsPublic,
			&i.IsArchived,
			&i.IsDeleted,
			&i.PopularityScore,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
