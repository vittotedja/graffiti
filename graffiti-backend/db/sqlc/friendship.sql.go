// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: friendship.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const acceptFriendship = `-- name: AcceptFriendship :one
UPDATE friendships
  SET status = 'friends'
WHERE id = $1
RETURNING id, from_user, to_user, status, created_at, updated_at
`

func (q *Queries) AcceptFriendship(ctx context.Context, id pgtype.UUID) (Friendship, error) {
	row := q.db.QueryRow(ctx, acceptFriendship, id)
	var i Friendship
	err := row.Scan(
		&i.ID,
		&i.FromUser,
		&i.ToUser,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const blockFriendship = `-- name: BlockFriendship :one
UPDATE friendships
  SET status = 'blocked'
WHERE id = $1
RETURNING id, from_user, to_user, status, created_at, updated_at
`

func (q *Queries) BlockFriendship(ctx context.Context, id pgtype.UUID) (Friendship, error) {
	row := q.db.QueryRow(ctx, blockFriendship, id)
	var i Friendship
	err := row.Scan(
		&i.ID,
		&i.FromUser,
		&i.ToUser,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createFriendship = `-- name: CreateFriendship :one
INSERT INTO friendships(
 from_user,
 to_user,
 status
) VALUES (
  $1, $2, $3
) RETURNING id, from_user, to_user, status, created_at, updated_at
`

type CreateFriendshipParams struct {
	FromUser pgtype.UUID
	ToUser   pgtype.UUID
	Status   NullStatus
}

func (q *Queries) CreateFriendship(ctx context.Context, arg CreateFriendshipParams) (Friendship, error) {
	row := q.db.QueryRow(ctx, createFriendship, arg.FromUser, arg.ToUser, arg.Status)
	var i Friendship
	err := row.Scan(
		&i.ID,
		&i.FromUser,
		&i.ToUser,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteFriendship = `-- name: DeleteFriendship :exec
DELETE FROM friendships
WHERE id = $1
`

func (q *Queries) DeleteFriendship(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteFriendship, id)
	return err
}

const discoverFriendsByMutuals = `-- name: DiscoverFriendsByMutuals :many
SELECT
    u.id,
    u.fullname,
    u.username,
    u.profile_picture,
    COUNT(*) AS mutual_friend_count
FROM accepted_friendships_mv af1
    JOIN accepted_friendships_mv af2 ON af1.friend_id = af2.friend_id
    JOIN users u ON u.id = af2.user_id
WHERE af1.user_id = $1  -- current user
AND af2.user_id != $1   -- exclude self
AND af2.user_id NOT IN (
  SELECT friend_id FROM accepted_friendships_mv WHERE user_id = $1
) -- exclude existing friends
GROUP BY u.id
ORDER BY mutual_friend_count DESC
`

type DiscoverFriendsByMutualsRow struct {
	ID                pgtype.UUID
	Fullname          pgtype.Text
	Username          string
	ProfilePicture    pgtype.Text
	MutualFriendCount int64
}

func (q *Queries) DiscoverFriendsByMutuals(ctx context.Context, userID pgtype.UUID) ([]DiscoverFriendsByMutualsRow, error) {
	rows, err := q.db.Query(ctx, discoverFriendsByMutuals, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DiscoverFriendsByMutualsRow
	for rows.Next() {
		var i DiscoverFriendsByMutualsRow
		if err := rows.Scan(
			&i.ID,
			&i.Fullname,
			&i.Username,
			&i.ProfilePicture,
			&i.MutualFriendCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFriendship = `-- name: GetFriendship :one
SELECT id, from_user, to_user, status, created_at, updated_at FROM friendships
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetFriendship(ctx context.Context, id pgtype.UUID) (Friendship, error) {
	row := q.db.QueryRow(ctx, getFriendship, id)
	var i Friendship
	err := row.Scan(
		&i.ID,
		&i.FromUser,
		&i.ToUser,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getNumberOfFriends = `-- name: GetNumberOfFriends :one
SELECT COUNT(*) FROM friendships
WHERE ((from_user = $1) OR (to_user = $1)) AND status = 'friends'
`

func (q *Queries) GetNumberOfFriends(ctx context.Context, fromUser pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, getNumberOfFriends, fromUser)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getNumberOfMutualFriends = `-- name: GetNumberOfMutualFriends :one
SELECT COUNT(*) FROM accepted_friendships_mv af1
JOIN accepted_friendships_mv af2 ON af1.friend_id = af2.friend_id
WHERE af1.user_id = $1 AND af2.user_id = $2
`

type GetNumberOfMutualFriendsParams struct {
	UserID   pgtype.UUID
	UserID_2 pgtype.UUID
}

func (q *Queries) GetNumberOfMutualFriends(ctx context.Context, arg GetNumberOfMutualFriendsParams) (int64, error) {
	row := q.db.QueryRow(ctx, getNumberOfMutualFriends, arg.UserID, arg.UserID_2)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getNumberOfPendingFriendRequests = `-- name: GetNumberOfPendingFriendRequests :one
SELECT COUNT(*) FROM friendships
WHERE to_user = $1 AND status = 'pending'
`

func (q *Queries) GetNumberOfPendingFriendRequests(ctx context.Context, toUser pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, getNumberOfPendingFriendRequests, toUser)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listFriendsDetailsByStatus = `-- name: ListFriendsDetailsByStatus :many
SELECT u.id as user_id, u.fullname, u.username, u.profile_picture, f.status, f.id
FROM friendships f
JOIN users u ON u.id = 
  CASE 
    WHEN f.from_user = $1 AND $2 = 'friends' THEN f.to_user
    WHEN f.from_user = $1 AND $2 = 'sent' THEN f.to_user
    WHEN f.to_user = $1 AND $2 = 'requested' THEN f.from_user
    WHEN f.to_user = $1 AND $2 = 'friends' THEN f.from_user
    ELSE NULL
  END
WHERE 
  (
    ($2 = 'friends' AND f.status = 'friends' AND (f.from_user = $1)) OR
    ($2 = 'sent' AND f.status = 'pending' AND f.from_user = $1) OR
    ($2 = 'requested' AND f.status = 'pending' AND f.to_user = $1)
  )
`

type ListFriendsDetailsByStatusParams struct {
	FromUser pgtype.UUID
	Column2  interface{}
}

type ListFriendsDetailsByStatusRow struct {
	UserID         pgtype.UUID
	Fullname       pgtype.Text
	Username       string
	ProfilePicture pgtype.Text
	Status         NullStatus
	ID             pgtype.UUID
}

func (q *Queries) ListFriendsDetailsByStatus(ctx context.Context, arg ListFriendsDetailsByStatusParams) ([]ListFriendsDetailsByStatusRow, error) {
	rows, err := q.db.Query(ctx, listFriendsDetailsByStatus, arg.FromUser, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListFriendsDetailsByStatusRow
	for rows.Next() {
		var i ListFriendsDetailsByStatusRow
		if err := rows.Scan(
			&i.UserID,
			&i.Fullname,
			&i.Username,
			&i.ProfilePicture,
			&i.Status,
			&i.ID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFriendshipByUserPairs = `-- name: ListFriendshipByUserPairs :one
SELECT id, from_user, to_user, status, created_at, updated_at FROM friendships
WHERE (from_user = $1 AND to_user = $2) OR (from_user = $2 AND to_user = $1)
`

type ListFriendshipByUserPairsParams struct {
	FromUser pgtype.UUID
	ToUser   pgtype.UUID
}

func (q *Queries) ListFriendshipByUserPairs(ctx context.Context, arg ListFriendshipByUserPairsParams) (Friendship, error) {
	row := q.db.QueryRow(ctx, listFriendshipByUserPairs, arg.FromUser, arg.ToUser)
	var i Friendship
	err := row.Scan(
		&i.ID,
		&i.FromUser,
		&i.ToUser,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listFriendships = `-- name: ListFriendships :many
SELECT id, from_user, to_user, status, created_at, updated_at FROM friendships
ORDER BY id
`

func (q *Queries) ListFriendships(ctx context.Context) ([]Friendship, error) {
	rows, err := q.db.Query(ctx, listFriendships)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Friendship
	for rows.Next() {
		var i Friendship
		if err := rows.Scan(
			&i.ID,
			&i.FromUser,
			&i.ToUser,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFriendshipsByUserId = `-- name: ListFriendshipsByUserId :many
SELECT id, from_user, to_user, status, created_at, updated_at FROM friendships
WHERE (from_user = $1 OR to_user = $1)
ORDER BY id
`

func (q *Queries) ListFriendshipsByUserId(ctx context.Context, fromUser pgtype.UUID) ([]Friendship, error) {
	rows, err := q.db.Query(ctx, listFriendshipsByUserId, fromUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Friendship
	for rows.Next() {
		var i Friendship
		if err := rows.Scan(
			&i.ID,
			&i.FromUser,
			&i.ToUser,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFriendshipsByUserIdAndStatus = `-- name: ListFriendshipsByUserIdAndStatus :many
SELECT id, from_user, to_user, status, created_at, updated_at FROM friendships
WHERE (from_user = $1 OR to_user = $1) AND status = $2
ORDER BY id
`

type ListFriendshipsByUserIdAndStatusParams struct {
	FromUser pgtype.UUID
	Status   NullStatus
}

func (q *Queries) ListFriendshipsByUserIdAndStatus(ctx context.Context, arg ListFriendshipsByUserIdAndStatusParams) ([]Friendship, error) {
	rows, err := q.db.Query(ctx, listFriendshipsByUserIdAndStatus, arg.FromUser, arg.Status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Friendship
	for rows.Next() {
		var i Friendship
		if err := rows.Scan(
			&i.ID,
			&i.FromUser,
			&i.ToUser,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listReceivedPendingFriendRequests = `-- name: ListReceivedPendingFriendRequests :many
SELECT f.id, f.from_user, f.to_user, f.status, f.created_at, f.updated_at, users.fullname, users.username, users.profile_picture FROM friendships f
left join users on users.id = f.from_user
WHERE to_user = $1 AND status = 'pending'
`

type ListReceivedPendingFriendRequestsRow struct {
	ID             pgtype.UUID
	FromUser       pgtype.UUID
	ToUser         pgtype.UUID
	Status         NullStatus
	CreatedAt      pgtype.Timestamp
	UpdatedAt      pgtype.Timestamp
	Fullname       pgtype.Text
	Username       pgtype.Text
	ProfilePicture pgtype.Text
}

func (q *Queries) ListReceivedPendingFriendRequests(ctx context.Context, toUser pgtype.UUID) ([]ListReceivedPendingFriendRequestsRow, error) {
	rows, err := q.db.Query(ctx, listReceivedPendingFriendRequests, toUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListReceivedPendingFriendRequestsRow
	for rows.Next() {
		var i ListReceivedPendingFriendRequestsRow
		if err := rows.Scan(
			&i.ID,
			&i.FromUser,
			&i.ToUser,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Fullname,
			&i.Username,
			&i.ProfilePicture,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSentPendingFriendRequests = `-- name: ListSentPendingFriendRequests :many
SELECT f.id, f.from_user, f.to_user, f.status, f.created_at, f.updated_at, users.fullname, users.username, users.profile_picture FROM friendships f
left join users on users.id = f.to_user
WHERE from_user = $1 AND status = 'pending'
`

type ListSentPendingFriendRequestsRow struct {
	ID             pgtype.UUID
	FromUser       pgtype.UUID
	ToUser         pgtype.UUID
	Status         NullStatus
	CreatedAt      pgtype.Timestamp
	UpdatedAt      pgtype.Timestamp
	Fullname       pgtype.Text
	Username       pgtype.Text
	ProfilePicture pgtype.Text
}

func (q *Queries) ListSentPendingFriendRequests(ctx context.Context, fromUser pgtype.UUID) ([]ListSentPendingFriendRequestsRow, error) {
	rows, err := q.db.Query(ctx, listSentPendingFriendRequests, fromUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListSentPendingFriendRequestsRow
	for rows.Next() {
		var i ListSentPendingFriendRequestsRow
		if err := rows.Scan(
			&i.ID,
			&i.FromUser,
			&i.ToUser,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Fullname,
			&i.Username,
			&i.ProfilePicture,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const rejectFriendship = `-- name: RejectFriendship :exec
DELETE FROM friendships
WHERE id = $1
`

func (q *Queries) RejectFriendship(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, rejectFriendship, id)
	return err
}

const updateFriendship = `-- name: UpdateFriendship :one
UPDATE friendships
  SET status = $2
WHERE id = $1
RETURNING id, from_user, to_user, status, created_at, updated_at
`

type UpdateFriendshipParams struct {
	ID     pgtype.UUID
	Status NullStatus
}

func (q *Queries) UpdateFriendship(ctx context.Context, arg UpdateFriendshipParams) (Friendship, error) {
	row := q.db.QueryRow(ctx, updateFriendship, arg.ID, arg.Status)
	var i Friendship
	err := row.Scan(
		&i.ID,
		&i.FromUser,
		&i.ToUser,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
