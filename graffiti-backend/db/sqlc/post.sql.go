// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: post.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addLikesCount = `-- name: AddLikesCount :one
UPDATE posts
  set likes_count = likes_count + 1
WHERE id = $1
RETURNING id, wall_id, author, media_url, post_type, is_highlighted, likes_count, is_deleted, created_at
`

func (q *Queries) AddLikesCount(ctx context.Context, id pgtype.UUID) (Post, error) {
	row := q.db.QueryRow(ctx, addLikesCount, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.WallID,
		&i.Author,
		&i.MediaUrl,
		&i.PostType,
		&i.IsHighlighted,
		&i.LikesCount,
		&i.IsDeleted,
		&i.CreatedAt,
	)
	return i, err
}

const createPost = `-- name: CreatePost :one
INSERT INTO posts(
 wall_id,
 author,
 media_url,
 post_type
) VALUES (
  $1, $2, $3, $4
) RETURNING id, wall_id, author, media_url, post_type, is_highlighted, likes_count, is_deleted, created_at
`

type CreatePostParams struct {
	WallID   pgtype.UUID
	Author   pgtype.UUID
	MediaUrl pgtype.Text
	PostType NullPostType
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRow(ctx, createPost,
		arg.WallID,
		arg.Author,
		arg.MediaUrl,
		arg.PostType,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.WallID,
		&i.Author,
		&i.MediaUrl,
		&i.PostType,
		&i.IsHighlighted,
		&i.LikesCount,
		&i.IsDeleted,
		&i.CreatedAt,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
UPDATE posts
  set is_deleted = true
WHERE id = $1
`

func (q *Queries) DeletePost(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deletePost, id)
	return err
}

const getHighlightedPosts = `-- name: GetHighlightedPosts :many
SELECT id, wall_id, author, media_url, post_type, is_highlighted, likes_count, is_deleted, created_at FROM posts
WHERE is_highlighted = true
ORDER BY id
`

func (q *Queries) GetHighlightedPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.db.Query(ctx, getHighlightedPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.WallID,
			&i.Author,
			&i.MediaUrl,
			&i.PostType,
			&i.IsHighlighted,
			&i.LikesCount,
			&i.IsDeleted,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPost = `-- name: GetPost :one
SELECT id, wall_id, author, media_url, post_type, is_highlighted, likes_count, is_deleted, created_at FROM posts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPost(ctx context.Context, id pgtype.UUID) (Post, error) {
	row := q.db.QueryRow(ctx, getPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.WallID,
		&i.Author,
		&i.MediaUrl,
		&i.PostType,
		&i.IsHighlighted,
		&i.LikesCount,
		&i.IsDeleted,
		&i.CreatedAt,
	)
	return i, err
}

const highlightPost = `-- name: HighlightPost :one
UPDATE posts
  set is_highlighted = true
WHERE id = $1
RETURNING id, wall_id, author, media_url, post_type, is_highlighted, likes_count, is_deleted, created_at
`

func (q *Queries) HighlightPost(ctx context.Context, id pgtype.UUID) (Post, error) {
	row := q.db.QueryRow(ctx, highlightPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.WallID,
		&i.Author,
		&i.MediaUrl,
		&i.PostType,
		&i.IsHighlighted,
		&i.LikesCount,
		&i.IsDeleted,
		&i.CreatedAt,
	)
	return i, err
}

const listPosts = `-- name: ListPosts :many
SELECT id, wall_id, author, media_url, post_type, is_highlighted, likes_count, is_deleted, created_at FROM posts
ORDER BY id
`

func (q *Queries) ListPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.db.Query(ctx, listPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.WallID,
			&i.Author,
			&i.MediaUrl,
			&i.PostType,
			&i.IsHighlighted,
			&i.LikesCount,
			&i.IsDeleted,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPostsByWall = `-- name: ListPostsByWall :many
SELECT id, wall_id, author, media_url, post_type, is_highlighted, likes_count, is_deleted, created_at FROM posts
WHERE wall_id = $1
ORDER BY id DESC
`

func (q *Queries) ListPostsByWall(ctx context.Context, wallID pgtype.UUID) ([]Post, error) {
	rows, err := q.db.Query(ctx, listPostsByWall, wallID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.WallID,
			&i.Author,
			&i.MediaUrl,
			&i.PostType,
			&i.IsHighlighted,
			&i.LikesCount,
			&i.IsDeleted,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPostsByWallWithAuthorsDetails = `-- name: ListPostsByWallWithAuthorsDetails :many
SELECT p.id, p.wall_id, p.author, p.media_url, p.post_type, p.is_highlighted, p.likes_count, p.is_deleted, p.created_at, u.username, u.profile_picture, u.fullname FROM posts p
JOIN users u ON p.author = u.id
WHERE p.wall_id = $1
ORDER BY p.created_at DESC
`

type ListPostsByWallWithAuthorsDetailsRow struct {
	ID             pgtype.UUID
	WallID         pgtype.UUID
	Author         pgtype.UUID
	MediaUrl       pgtype.Text
	PostType       NullPostType
	IsHighlighted  pgtype.Bool
	LikesCount     pgtype.Int4
	IsDeleted      pgtype.Bool
	CreatedAt      pgtype.Timestamp
	Username       string
	ProfilePicture pgtype.Text
	Fullname       pgtype.Text
}

func (q *Queries) ListPostsByWallWithAuthorsDetails(ctx context.Context, wallID pgtype.UUID) ([]ListPostsByWallWithAuthorsDetailsRow, error) {
	rows, err := q.db.Query(ctx, listPostsByWallWithAuthorsDetails, wallID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPostsByWallWithAuthorsDetailsRow
	for rows.Next() {
		var i ListPostsByWallWithAuthorsDetailsRow
		if err := rows.Scan(
			&i.ID,
			&i.WallID,
			&i.Author,
			&i.MediaUrl,
			&i.PostType,
			&i.IsHighlighted,
			&i.LikesCount,
			&i.IsDeleted,
			&i.CreatedAt,
			&i.Username,
			&i.ProfilePicture,
			&i.Fullname,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :one
UPDATE posts
  set
    media_url = COALESCE($2, media_url),
    post_type = COALESCE($3, post_type)
WHERE id = $1
RETURNING id, wall_id, author, media_url, post_type, is_highlighted, likes_count, is_deleted, created_at
`

type UpdatePostParams struct {
	ID       pgtype.UUID
	MediaUrl pgtype.Text
	PostType NullPostType
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (Post, error) {
	row := q.db.QueryRow(ctx, updatePost, arg.ID, arg.MediaUrl, arg.PostType)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.WallID,
		&i.Author,
		&i.MediaUrl,
		&i.PostType,
		&i.IsHighlighted,
		&i.LikesCount,
		&i.IsDeleted,
		&i.CreatedAt,
	)
	return i, err
}
