// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vittotedja/graffiti/graffiti-backend/db/sqlc (interfaces: Hub)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pgtype "github.com/jackc/pgx/v5/pgtype"
	db "github.com/vittotedja/graffiti/graffiti-backend/db/sqlc"
)

// MockHub is a mock of Hub interface.
type MockHub struct {
	ctrl     *gomock.Controller
	recorder *MockHubMockRecorder
}

// MockHubMockRecorder is the mock recorder for MockHub.
type MockHubMockRecorder struct {
	mock *MockHub
}

// NewMockHub creates a new mock instance.
func NewMockHub(ctrl *gomock.Controller) *MockHub {
	mock := &MockHub{ctrl: ctrl}
	mock.recorder = &MockHubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHub) EXPECT() *MockHubMockRecorder {
	return m.recorder
}

// AcceptFriendRequestTx mocks base method.
func (m *MockHub) AcceptFriendRequestTx(arg0 context.Context, arg1 pgtype.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptFriendRequestTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcceptFriendRequestTx indicates an expected call of AcceptFriendRequestTx.
func (mr *MockHubMockRecorder) AcceptFriendRequestTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptFriendRequestTx", reflect.TypeOf((*MockHub)(nil).AcceptFriendRequestTx), arg0, arg1)
}

// AcceptFriendship mocks base method.
func (m *MockHub) AcceptFriendship(arg0 context.Context, arg1 pgtype.UUID) (db.Friendship, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptFriendship", arg0, arg1)
	ret0, _ := ret[0].(db.Friendship)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptFriendship indicates an expected call of AcceptFriendship.
func (mr *MockHubMockRecorder) AcceptFriendship(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptFriendship", reflect.TypeOf((*MockHub)(nil).AcceptFriendship), arg0, arg1)
}

// AddLikesCount mocks base method.
func (m *MockHub) AddLikesCount(arg0 context.Context, arg1 pgtype.UUID) (db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLikesCount", arg0, arg1)
	ret0, _ := ret[0].(db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddLikesCount indicates an expected call of AddLikesCount.
func (mr *MockHubMockRecorder) AddLikesCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLikesCount", reflect.TypeOf((*MockHub)(nil).AddLikesCount), arg0, arg1)
}

// ArchiveWall mocks base method.
func (m *MockHub) ArchiveWall(arg0 context.Context, arg1 pgtype.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArchiveWall", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ArchiveWall indicates an expected call of ArchiveWall.
func (mr *MockHubMockRecorder) ArchiveWall(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArchiveWall", reflect.TypeOf((*MockHub)(nil).ArchiveWall), arg0, arg1)
}

// BlockFriendship mocks base method.
func (m *MockHub) BlockFriendship(arg0 context.Context, arg1 pgtype.UUID) (db.Friendship, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockFriendship", arg0, arg1)
	ret0, _ := ret[0].(db.Friendship)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockFriendship indicates an expected call of BlockFriendship.
func (mr *MockHubMockRecorder) BlockFriendship(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockFriendship", reflect.TypeOf((*MockHub)(nil).BlockFriendship), arg0, arg1)
}

// BlockUserTx mocks base method.
func (m *MockHub) BlockUserTx(arg0 context.Context, arg1, arg2 pgtype.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockUserTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// BlockUserTx indicates an expected call of BlockUserTx.
func (mr *MockHubMockRecorder) BlockUserTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockUserTx", reflect.TypeOf((*MockHub)(nil).BlockUserTx), arg0, arg1, arg2)
}

// CreateFriendRequestTx mocks base method.
func (m *MockHub) CreateFriendRequestTx(arg0 context.Context, arg1, arg2 pgtype.UUID) (db.Friendship, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFriendRequestTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(db.Friendship)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFriendRequestTx indicates an expected call of CreateFriendRequestTx.
func (mr *MockHubMockRecorder) CreateFriendRequestTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFriendRequestTx", reflect.TypeOf((*MockHub)(nil).CreateFriendRequestTx), arg0, arg1, arg2)
}

// CreateFriendship mocks base method.
func (m *MockHub) CreateFriendship(arg0 context.Context, arg1 db.CreateFriendshipParams) (db.Friendship, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFriendship", arg0, arg1)
	ret0, _ := ret[0].(db.Friendship)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFriendship indicates an expected call of CreateFriendship.
func (mr *MockHubMockRecorder) CreateFriendship(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFriendship", reflect.TypeOf((*MockHub)(nil).CreateFriendship), arg0, arg1)
}

// CreateLike mocks base method.
func (m *MockHub) CreateLike(arg0 context.Context, arg1 db.CreateLikeParams) (db.Like, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLike", arg0, arg1)
	ret0, _ := ret[0].(db.Like)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLike indicates an expected call of CreateLike.
func (mr *MockHubMockRecorder) CreateLike(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLike", reflect.TypeOf((*MockHub)(nil).CreateLike), arg0, arg1)
}

// CreateLikeTx mocks base method.
func (m *MockHub) CreateLikeTx(arg0 context.Context, arg1, arg2 pgtype.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLikeTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLikeTx indicates an expected call of CreateLikeTx.
func (mr *MockHubMockRecorder) CreateLikeTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLikeTx", reflect.TypeOf((*MockHub)(nil).CreateLikeTx), arg0, arg1, arg2)
}

// CreateOrDeleteLikeTx mocks base method.
func (m *MockHub) CreateOrDeleteLikeTx(arg0 context.Context, arg1, arg2 pgtype.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrDeleteLikeTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrDeleteLikeTx indicates an expected call of CreateOrDeleteLikeTx.
func (mr *MockHubMockRecorder) CreateOrDeleteLikeTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrDeleteLikeTx", reflect.TypeOf((*MockHub)(nil).CreateOrDeleteLikeTx), arg0, arg1, arg2)
}

// CreatePost mocks base method.
func (m *MockHub) CreatePost(arg0 context.Context, arg1 db.CreatePostParams) (db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", arg0, arg1)
	ret0, _ := ret[0].(db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockHubMockRecorder) CreatePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockHub)(nil).CreatePost), arg0, arg1)
}

// CreateTestWall mocks base method.
func (m *MockHub) CreateTestWall(arg0 context.Context, arg1 db.CreateTestWallParams) (db.Wall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTestWall", arg0, arg1)
	ret0, _ := ret[0].(db.Wall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTestWall indicates an expected call of CreateTestWall.
func (mr *MockHubMockRecorder) CreateTestWall(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTestWall", reflect.TypeOf((*MockHub)(nil).CreateTestWall), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockHub) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockHubMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockHub)(nil).CreateUser), arg0, arg1)
}

// CreateWall mocks base method.
func (m *MockHub) CreateWall(arg0 context.Context, arg1 db.CreateWallParams) (db.Wall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWall", arg0, arg1)
	ret0, _ := ret[0].(db.Wall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWall indicates an expected call of CreateWall.
func (mr *MockHubMockRecorder) CreateWall(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWall", reflect.TypeOf((*MockHub)(nil).CreateWall), arg0, arg1)
}

// DeleteFriendship mocks base method.
func (m *MockHub) DeleteFriendship(arg0 context.Context, arg1 pgtype.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFriendship", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFriendship indicates an expected call of DeleteFriendship.
func (mr *MockHubMockRecorder) DeleteFriendship(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFriendship", reflect.TypeOf((*MockHub)(nil).DeleteFriendship), arg0, arg1)
}

// DeleteLike mocks base method.
func (m *MockHub) DeleteLike(arg0 context.Context, arg1 db.DeleteLikeParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLike", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLike indicates an expected call of DeleteLike.
func (mr *MockHubMockRecorder) DeleteLike(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLike", reflect.TypeOf((*MockHub)(nil).DeleteLike), arg0, arg1)
}

// DeletePost mocks base method.
func (m *MockHub) DeletePost(arg0 context.Context, arg1 pgtype.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockHubMockRecorder) DeletePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockHub)(nil).DeletePost), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockHub) DeleteUser(arg0 context.Context, arg1 pgtype.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockHubMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockHub)(nil).DeleteUser), arg0, arg1)
}

// DeleteWall mocks base method.
func (m *MockHub) DeleteWall(arg0 context.Context, arg1 pgtype.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWall", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWall indicates an expected call of DeleteWall.
func (mr *MockHubMockRecorder) DeleteWall(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWall", reflect.TypeOf((*MockHub)(nil).DeleteWall), arg0, arg1)
}

// FinishOnboarding mocks base method.
func (m *MockHub) FinishOnboarding(arg0 context.Context, arg1 pgtype.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishOnboarding", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinishOnboarding indicates an expected call of FinishOnboarding.
func (mr *MockHubMockRecorder) FinishOnboarding(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishOnboarding", reflect.TypeOf((*MockHub)(nil).FinishOnboarding), arg0, arg1)
}

// GetFriendsTx mocks base method.
func (m *MockHub) GetFriendsTx(arg0 context.Context, arg1 pgtype.UUID) ([]db.Friendship, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFriendsTx", arg0, arg1)
	ret0, _ := ret[0].([]db.Friendship)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFriendsTx indicates an expected call of GetFriendsTx.
func (mr *MockHubMockRecorder) GetFriendsTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFriendsTx", reflect.TypeOf((*MockHub)(nil).GetFriendsTx), arg0, arg1)
}

// GetFriendship mocks base method.
func (m *MockHub) GetFriendship(arg0 context.Context, arg1 pgtype.UUID) (db.Friendship, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFriendship", arg0, arg1)
	ret0, _ := ret[0].(db.Friendship)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFriendship indicates an expected call of GetFriendship.
func (mr *MockHubMockRecorder) GetFriendship(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFriendship", reflect.TypeOf((*MockHub)(nil).GetFriendship), arg0, arg1)
}

// GetHighlightedPosts mocks base method.
func (m *MockHub) GetHighlightedPosts(arg0 context.Context) ([]db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHighlightedPosts", arg0)
	ret0, _ := ret[0].([]db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHighlightedPosts indicates an expected call of GetHighlightedPosts.
func (mr *MockHubMockRecorder) GetHighlightedPosts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHighlightedPosts", reflect.TypeOf((*MockHub)(nil).GetHighlightedPosts), arg0)
}

// GetHighlightedPostsByWall mocks base method.
func (m *MockHub) GetHighlightedPostsByWall(arg0 context.Context, arg1 pgtype.UUID) ([]db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHighlightedPostsByWall", arg0, arg1)
	ret0, _ := ret[0].([]db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHighlightedPostsByWall indicates an expected call of GetHighlightedPostsByWall.
func (mr *MockHubMockRecorder) GetHighlightedPostsByWall(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHighlightedPostsByWall", reflect.TypeOf((*MockHub)(nil).GetHighlightedPostsByWall), arg0, arg1)
}

// GetLike mocks base method.
func (m *MockHub) GetLike(arg0 context.Context, arg1 db.GetLikeParams) (db.Like, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLike", arg0, arg1)
	ret0, _ := ret[0].(db.Like)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLike indicates an expected call of GetLike.
func (mr *MockHubMockRecorder) GetLike(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLike", reflect.TypeOf((*MockHub)(nil).GetLike), arg0, arg1)
}

// GetNumberOfFriends mocks base method.
func (m *MockHub) GetNumberOfFriends(arg0 context.Context, arg1 pgtype.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumberOfFriends", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNumberOfFriends indicates an expected call of GetNumberOfFriends.
func (mr *MockHubMockRecorder) GetNumberOfFriends(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumberOfFriends", reflect.TypeOf((*MockHub)(nil).GetNumberOfFriends), arg0, arg1)
}

// GetNumberOfLikesByPost mocks base method.
func (m *MockHub) GetNumberOfLikesByPost(arg0 context.Context, arg1 pgtype.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumberOfLikesByPost", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNumberOfLikesByPost indicates an expected call of GetNumberOfLikesByPost.
func (mr *MockHubMockRecorder) GetNumberOfLikesByPost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumberOfLikesByPost", reflect.TypeOf((*MockHub)(nil).GetNumberOfLikesByPost), arg0, arg1)
}

// GetNumberOfPendingFriendRequests mocks base method.
func (m *MockHub) GetNumberOfPendingFriendRequests(arg0 context.Context, arg1 pgtype.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumberOfPendingFriendRequests", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNumberOfPendingFriendRequests indicates an expected call of GetNumberOfPendingFriendRequests.
func (mr *MockHubMockRecorder) GetNumberOfPendingFriendRequests(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumberOfPendingFriendRequests", reflect.TypeOf((*MockHub)(nil).GetNumberOfPendingFriendRequests), arg0, arg1)
}

// GetPendingFriendRequestsTx mocks base method.
func (m *MockHub) GetPendingFriendRequestsTx(arg0 context.Context, arg1 pgtype.UUID) ([]db.Friendship, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingFriendRequestsTx", arg0, arg1)
	ret0, _ := ret[0].([]db.Friendship)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingFriendRequestsTx indicates an expected call of GetPendingFriendRequestsTx.
func (mr *MockHubMockRecorder) GetPendingFriendRequestsTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingFriendRequestsTx", reflect.TypeOf((*MockHub)(nil).GetPendingFriendRequestsTx), arg0, arg1)
}

// GetPost mocks base method.
func (m *MockHub) GetPost(arg0 context.Context, arg1 pgtype.UUID) (db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPost", arg0, arg1)
	ret0, _ := ret[0].(db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost.
func (mr *MockHubMockRecorder) GetPost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockHub)(nil).GetPost), arg0, arg1)
}

// GetSentFriendRequestsTx mocks base method.
func (m *MockHub) GetSentFriendRequestsTx(arg0 context.Context, arg1 pgtype.UUID) ([]db.Friendship, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSentFriendRequestsTx", arg0, arg1)
	ret0, _ := ret[0].([]db.Friendship)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSentFriendRequestsTx indicates an expected call of GetSentFriendRequestsTx.
func (mr *MockHubMockRecorder) GetSentFriendRequestsTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSentFriendRequestsTx", reflect.TypeOf((*MockHub)(nil).GetSentFriendRequestsTx), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockHub) GetUser(arg0 context.Context, arg1 pgtype.UUID) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockHubMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockHub)(nil).GetUser), arg0, arg1)
}

// GetUserByEmail mocks base method.
func (m *MockHub) GetUserByEmail(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockHubMockRecorder) GetUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockHub)(nil).GetUserByEmail), arg0, arg1)
}

// GetUserByUsername mocks base method.
func (m *MockHub) GetUserByUsername(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockHubMockRecorder) GetUserByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockHub)(nil).GetUserByUsername), arg0, arg1)
}

// GetWall mocks base method.
func (m *MockHub) GetWall(arg0 context.Context, arg1 pgtype.UUID) (db.Wall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWall", arg0, arg1)
	ret0, _ := ret[0].(db.Wall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWall indicates an expected call of GetWall.
func (mr *MockHubMockRecorder) GetWall(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWall", reflect.TypeOf((*MockHub)(nil).GetWall), arg0, arg1)
}

// HighlightPost mocks base method.
func (m *MockHub) HighlightPost(arg0 context.Context, arg1 pgtype.UUID) (db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HighlightPost", arg0, arg1)
	ret0, _ := ret[0].(db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HighlightPost indicates an expected call of HighlightPost.
func (mr *MockHubMockRecorder) HighlightPost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HighlightPost", reflect.TypeOf((*MockHub)(nil).HighlightPost), arg0, arg1)
}

// IsFriendTx mocks base method.
func (m *MockHub) IsFriendTx(arg0 context.Context, arg1, arg2 pgtype.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFriendTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFriendTx indicates an expected call of IsFriendTx.
func (mr *MockHubMockRecorder) IsFriendTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFriendTx", reflect.TypeOf((*MockHub)(nil).IsFriendTx), arg0, arg1, arg2)
}

// IsUserBlockedTx mocks base method.
func (m *MockHub) IsUserBlockedTx(arg0 context.Context, arg1, arg2 pgtype.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserBlockedTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUserBlockedTx indicates an expected call of IsUserBlockedTx.
func (mr *MockHubMockRecorder) IsUserBlockedTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserBlockedTx", reflect.TypeOf((*MockHub)(nil).IsUserBlockedTx), arg0, arg1, arg2)
}

// ListFriendsDetailsByStatus mocks base method.
func (m *MockHub) ListFriendsDetailsByStatus(arg0 context.Context, arg1 db.ListFriendsDetailsByStatusParams) ([]db.ListFriendsDetailsByStatusRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFriendsDetailsByStatus", arg0, arg1)
	ret0, _ := ret[0].([]db.ListFriendsDetailsByStatusRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFriendsDetailsByStatus indicates an expected call of ListFriendsDetailsByStatus.
func (mr *MockHubMockRecorder) ListFriendsDetailsByStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFriendsDetailsByStatus", reflect.TypeOf((*MockHub)(nil).ListFriendsDetailsByStatus), arg0, arg1)
}

// ListFriendshipByUserPairs mocks base method.
func (m *MockHub) ListFriendshipByUserPairs(arg0 context.Context, arg1 db.ListFriendshipByUserPairsParams) (db.Friendship, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFriendshipByUserPairs", arg0, arg1)
	ret0, _ := ret[0].(db.Friendship)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFriendshipByUserPairs indicates an expected call of ListFriendshipByUserPairs.
func (mr *MockHubMockRecorder) ListFriendshipByUserPairs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFriendshipByUserPairs", reflect.TypeOf((*MockHub)(nil).ListFriendshipByUserPairs), arg0, arg1)
}

// ListFriendships mocks base method.
func (m *MockHub) ListFriendships(arg0 context.Context) ([]db.Friendship, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFriendships", arg0)
	ret0, _ := ret[0].([]db.Friendship)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFriendships indicates an expected call of ListFriendships.
func (mr *MockHubMockRecorder) ListFriendships(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFriendships", reflect.TypeOf((*MockHub)(nil).ListFriendships), arg0)
}

// ListFriendshipsByUserId mocks base method.
func (m *MockHub) ListFriendshipsByUserId(arg0 context.Context, arg1 pgtype.UUID) ([]db.Friendship, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFriendshipsByUserId", arg0, arg1)
	ret0, _ := ret[0].([]db.Friendship)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFriendshipsByUserId indicates an expected call of ListFriendshipsByUserId.
func (mr *MockHubMockRecorder) ListFriendshipsByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFriendshipsByUserId", reflect.TypeOf((*MockHub)(nil).ListFriendshipsByUserId), arg0, arg1)
}

// ListFriendshipsByUserIdAndStatus mocks base method.
func (m *MockHub) ListFriendshipsByUserIdAndStatus(arg0 context.Context, arg1 db.ListFriendshipsByUserIdAndStatusParams) ([]db.Friendship, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFriendshipsByUserIdAndStatus", arg0, arg1)
	ret0, _ := ret[0].([]db.Friendship)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFriendshipsByUserIdAndStatus indicates an expected call of ListFriendshipsByUserIdAndStatus.
func (mr *MockHubMockRecorder) ListFriendshipsByUserIdAndStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFriendshipsByUserIdAndStatus", reflect.TypeOf((*MockHub)(nil).ListFriendshipsByUserIdAndStatus), arg0, arg1)
}

// ListLikes mocks base method.
func (m *MockHub) ListLikes(arg0 context.Context) ([]db.Like, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLikes", arg0)
	ret0, _ := ret[0].([]db.Like)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLikes indicates an expected call of ListLikes.
func (mr *MockHubMockRecorder) ListLikes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLikes", reflect.TypeOf((*MockHub)(nil).ListLikes), arg0)
}

// ListLikesByPost mocks base method.
func (m *MockHub) ListLikesByPost(arg0 context.Context, arg1 pgtype.UUID) ([]db.Like, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLikesByPost", arg0, arg1)
	ret0, _ := ret[0].([]db.Like)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLikesByPost indicates an expected call of ListLikesByPost.
func (mr *MockHubMockRecorder) ListLikesByPost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLikesByPost", reflect.TypeOf((*MockHub)(nil).ListLikesByPost), arg0, arg1)
}

// ListLikesByUser mocks base method.
func (m *MockHub) ListLikesByUser(arg0 context.Context, arg1 pgtype.UUID) ([]db.Like, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLikesByUser", arg0, arg1)
	ret0, _ := ret[0].([]db.Like)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLikesByUser indicates an expected call of ListLikesByUser.
func (mr *MockHubMockRecorder) ListLikesByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLikesByUser", reflect.TypeOf((*MockHub)(nil).ListLikesByUser), arg0, arg1)
}

// ListPosts mocks base method.
func (m *MockHub) ListPosts(arg0 context.Context) ([]db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPosts", arg0)
	ret0, _ := ret[0].([]db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPosts indicates an expected call of ListPosts.
func (mr *MockHubMockRecorder) ListPosts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPosts", reflect.TypeOf((*MockHub)(nil).ListPosts), arg0)
}

// ListPostsByWall mocks base method.
func (m *MockHub) ListPostsByWall(arg0 context.Context, arg1 pgtype.UUID) ([]db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPostsByWall", arg0, arg1)
	ret0, _ := ret[0].([]db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPostsByWall indicates an expected call of ListPostsByWall.
func (mr *MockHubMockRecorder) ListPostsByWall(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPostsByWall", reflect.TypeOf((*MockHub)(nil).ListPostsByWall), arg0, arg1)
}

// ListPostsByWallWithAuthorsDetails mocks base method.
func (m *MockHub) ListPostsByWallWithAuthorsDetails(arg0 context.Context, arg1 pgtype.UUID) ([]db.ListPostsByWallWithAuthorsDetailsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPostsByWallWithAuthorsDetails", arg0, arg1)
	ret0, _ := ret[0].([]db.ListPostsByWallWithAuthorsDetailsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPostsByWallWithAuthorsDetails indicates an expected call of ListPostsByWallWithAuthorsDetails.
func (mr *MockHubMockRecorder) ListPostsByWallWithAuthorsDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPostsByWallWithAuthorsDetails", reflect.TypeOf((*MockHub)(nil).ListPostsByWallWithAuthorsDetails), arg0, arg1)
}

// ListReceivedPendingFriendRequests mocks base method.
func (m *MockHub) ListReceivedPendingFriendRequests(arg0 context.Context, arg1 pgtype.UUID) ([]db.ListReceivedPendingFriendRequestsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReceivedPendingFriendRequests", arg0, arg1)
	ret0, _ := ret[0].([]db.ListReceivedPendingFriendRequestsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReceivedPendingFriendRequests indicates an expected call of ListReceivedPendingFriendRequests.
func (mr *MockHubMockRecorder) ListReceivedPendingFriendRequests(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReceivedPendingFriendRequests", reflect.TypeOf((*MockHub)(nil).ListReceivedPendingFriendRequests), arg0, arg1)
}

// ListSentPendingFriendRequests mocks base method.
func (m *MockHub) ListSentPendingFriendRequests(arg0 context.Context, arg1 pgtype.UUID) ([]db.ListSentPendingFriendRequestsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSentPendingFriendRequests", arg0, arg1)
	ret0, _ := ret[0].([]db.ListSentPendingFriendRequestsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSentPendingFriendRequests indicates an expected call of ListSentPendingFriendRequests.
func (mr *MockHubMockRecorder) ListSentPendingFriendRequests(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSentPendingFriendRequests", reflect.TypeOf((*MockHub)(nil).ListSentPendingFriendRequests), arg0, arg1)
}

// ListUsers mocks base method.
func (m *MockHub) ListUsers(arg0 context.Context) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockHubMockRecorder) ListUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockHub)(nil).ListUsers), arg0)
}

// ListWalls mocks base method.
func (m *MockHub) ListWalls(arg0 context.Context) ([]db.Wall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWalls", arg0)
	ret0, _ := ret[0].([]db.Wall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWalls indicates an expected call of ListWalls.
func (mr *MockHubMockRecorder) ListWalls(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWalls", reflect.TypeOf((*MockHub)(nil).ListWalls), arg0)
}

// ListWallsByUser mocks base method.
func (m *MockHub) ListWallsByUser(arg0 context.Context, arg1 pgtype.UUID) ([]db.Wall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWallsByUser", arg0, arg1)
	ret0, _ := ret[0].([]db.Wall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWallsByUser indicates an expected call of ListWallsByUser.
func (mr *MockHubMockRecorder) ListWallsByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWallsByUser", reflect.TypeOf((*MockHub)(nil).ListWallsByUser), arg0, arg1)
}

// PinUnpinWall mocks base method.
func (m *MockHub) PinUnpinWall(arg0 context.Context, arg1 pgtype.UUID) (db.Wall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PinUnpinWall", arg0, arg1)
	ret0, _ := ret[0].(db.Wall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PinUnpinWall indicates an expected call of PinUnpinWall.
func (mr *MockHubMockRecorder) PinUnpinWall(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PinUnpinWall", reflect.TypeOf((*MockHub)(nil).PinUnpinWall), arg0, arg1)
}

// PrivatizeWall mocks base method.
func (m *MockHub) PrivatizeWall(arg0 context.Context, arg1 pgtype.UUID) (db.Wall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrivatizeWall", arg0, arg1)
	ret0, _ := ret[0].(db.Wall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrivatizeWall indicates an expected call of PrivatizeWall.
func (mr *MockHubMockRecorder) PrivatizeWall(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivatizeWall", reflect.TypeOf((*MockHub)(nil).PrivatizeWall), arg0, arg1)
}

// PublicizeWall mocks base method.
func (m *MockHub) PublicizeWall(arg0 context.Context, arg1 pgtype.UUID) (db.Wall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicizeWall", arg0, arg1)
	ret0, _ := ret[0].(db.Wall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublicizeWall indicates an expected call of PublicizeWall.
func (mr *MockHubMockRecorder) PublicizeWall(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicizeWall", reflect.TypeOf((*MockHub)(nil).PublicizeWall), arg0, arg1)
}

// RejectFriendship mocks base method.
func (m *MockHub) RejectFriendship(arg0 context.Context, arg1 pgtype.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectFriendship", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RejectFriendship indicates an expected call of RejectFriendship.
func (mr *MockHubMockRecorder) RejectFriendship(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectFriendship", reflect.TypeOf((*MockHub)(nil).RejectFriendship), arg0, arg1)
}

// RemoveLikesCount mocks base method.
func (m *MockHub) RemoveLikesCount(arg0 context.Context, arg1 pgtype.UUID) (db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLikesCount", arg0, arg1)
	ret0, _ := ret[0].(db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveLikesCount indicates an expected call of RemoveLikesCount.
func (mr *MockHubMockRecorder) RemoveLikesCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLikesCount", reflect.TypeOf((*MockHub)(nil).RemoveLikesCount), arg0, arg1)
}

// SearchUsersILike mocks base method.
func (m *MockHub) SearchUsersILike(arg0 context.Context, arg1 pgtype.Text) ([]db.SearchUsersILikeRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchUsersILike", arg0, arg1)
	ret0, _ := ret[0].([]db.SearchUsersILikeRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchUsersILike indicates an expected call of SearchUsersILike.
func (mr *MockHubMockRecorder) SearchUsersILike(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchUsersILike", reflect.TypeOf((*MockHub)(nil).SearchUsersILike), arg0, arg1)
}

// SearchUsersTrigram mocks base method.
func (m *MockHub) SearchUsersTrigram(arg0 context.Context, arg1 string) ([]db.SearchUsersTrigramRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchUsersTrigram", arg0, arg1)
	ret0, _ := ret[0].([]db.SearchUsersTrigramRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchUsersTrigram indicates an expected call of SearchUsersTrigram.
func (mr *MockHubMockRecorder) SearchUsersTrigram(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchUsersTrigram", reflect.TypeOf((*MockHub)(nil).SearchUsersTrigram), arg0, arg1)
}

// UnarchiveWall mocks base method.
func (m *MockHub) UnarchiveWall(arg0 context.Context, arg1 pgtype.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnarchiveWall", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnarchiveWall indicates an expected call of UnarchiveWall.
func (mr *MockHubMockRecorder) UnarchiveWall(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnarchiveWall", reflect.TypeOf((*MockHub)(nil).UnarchiveWall), arg0, arg1)
}

// UnblockUserTx mocks base method.
func (m *MockHub) UnblockUserTx(arg0 context.Context, arg1, arg2 pgtype.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnblockUserTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnblockUserTx indicates an expected call of UnblockUserTx.
func (mr *MockHubMockRecorder) UnblockUserTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnblockUserTx", reflect.TypeOf((*MockHub)(nil).UnblockUserTx), arg0, arg1, arg2)
}

// UnhighlightPost mocks base method.
func (m *MockHub) UnhighlightPost(arg0 context.Context, arg1 pgtype.UUID) (db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnhighlightPost", arg0, arg1)
	ret0, _ := ret[0].(db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnhighlightPost indicates an expected call of UnhighlightPost.
func (mr *MockHubMockRecorder) UnhighlightPost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnhighlightPost", reflect.TypeOf((*MockHub)(nil).UnhighlightPost), arg0, arg1)
}

// UpdateFriendship mocks base method.
func (m *MockHub) UpdateFriendship(arg0 context.Context, arg1 db.UpdateFriendshipParams) (db.Friendship, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFriendship", arg0, arg1)
	ret0, _ := ret[0].(db.Friendship)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFriendship indicates an expected call of UpdateFriendship.
func (mr *MockHubMockRecorder) UpdateFriendship(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFriendship", reflect.TypeOf((*MockHub)(nil).UpdateFriendship), arg0, arg1)
}

// UpdatePost mocks base method.
func (m *MockHub) UpdatePost(arg0 context.Context, arg1 db.UpdatePostParams) (db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePost", arg0, arg1)
	ret0, _ := ret[0].(db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePost indicates an expected call of UpdatePost.
func (mr *MockHubMockRecorder) UpdatePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockHub)(nil).UpdatePost), arg0, arg1)
}

// UpdateProfile mocks base method.
func (m *MockHub) UpdateProfile(arg0 context.Context, arg1 db.UpdateProfileParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockHubMockRecorder) UpdateProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockHub)(nil).UpdateProfile), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockHub) UpdateUser(arg0 context.Context, arg1 db.UpdateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockHubMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockHub)(nil).UpdateUser), arg0, arg1)
}

// UpdateUserNew mocks base method.
func (m *MockHub) UpdateUserNew(arg0 context.Context, arg1 db.UpdateUserNewParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserNew", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserNew indicates an expected call of UpdateUserNew.
func (mr *MockHubMockRecorder) UpdateUserNew(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserNew", reflect.TypeOf((*MockHub)(nil).UpdateUserNew), arg0, arg1)
}

// UpdateWall mocks base method.
func (m *MockHub) UpdateWall(arg0 context.Context, arg1 db.UpdateWallParams) (db.Wall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWall", arg0, arg1)
	ret0, _ := ret[0].(db.Wall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWall indicates an expected call of UpdateWall.
func (mr *MockHubMockRecorder) UpdateWall(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWall", reflect.TypeOf((*MockHub)(nil).UpdateWall), arg0, arg1)
}
